// protolint:disable INDENT REPEATED_FIELD_NAMES_PLURALIZED
// protolint:disable ENUM_FIELD_NAMES_PREFIX ENUM_FIELD_NAMES_UPPER_SNAKE_CASE
// protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pinochle.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PinochleService_CreateGame_FullMethodName = "/claco.pinochle.PinochleService/CreateGame"
	PinochleService_GetGame_FullMethodName    = "/claco.pinochle.PinochleService/GetGame"
	PinochleService_ListGames_FullMethodName  = "/claco.pinochle.PinochleService/ListGames"
	PinochleService_ResumeGame_FullMethodName = "/claco.pinochle.PinochleService/ResumeGame"
	PinochleService_StartGame_FullMethodName  = "/claco.pinochle.PinochleService/StartGame"
)

// PinochleServiceClient is the client API for PinochleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PinochleServiceClient interface {
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error)
	GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GetGameResponse, error)
	ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (PinochleService_ListGamesClient, error)
	ResumeGame(ctx context.Context, in *ResumeGameRequest, opts ...grpc.CallOption) (*ResumeGameResponse, error)
	StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error)
}

type pinochleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPinochleServiceClient(cc grpc.ClientConnInterface) PinochleServiceClient {
	return &pinochleServiceClient{cc}
}

func (c *pinochleServiceClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error) {
	out := new(CreateGameResponse)
	err := c.cc.Invoke(ctx, PinochleService_CreateGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinochleServiceClient) GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GetGameResponse, error) {
	out := new(GetGameResponse)
	err := c.cc.Invoke(ctx, PinochleService_GetGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinochleServiceClient) ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (PinochleService_ListGamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PinochleService_ServiceDesc.Streams[0], PinochleService_ListGames_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pinochleServiceListGamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PinochleService_ListGamesClient interface {
	Recv() (*Game, error)
	grpc.ClientStream
}

type pinochleServiceListGamesClient struct {
	grpc.ClientStream
}

func (x *pinochleServiceListGamesClient) Recv() (*Game, error) {
	m := new(Game)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pinochleServiceClient) ResumeGame(ctx context.Context, in *ResumeGameRequest, opts ...grpc.CallOption) (*ResumeGameResponse, error) {
	out := new(ResumeGameResponse)
	err := c.cc.Invoke(ctx, PinochleService_ResumeGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinochleServiceClient) StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error) {
	out := new(StartGameResponse)
	err := c.cc.Invoke(ctx, PinochleService_StartGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PinochleServiceServer is the server API for PinochleService service.
// All implementations must embed UnimplementedPinochleServiceServer
// for forward compatibility
type PinochleServiceServer interface {
	CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error)
	GetGame(context.Context, *GetGameRequest) (*GetGameResponse, error)
	ListGames(*ListGamesRequest, PinochleService_ListGamesServer) error
	ResumeGame(context.Context, *ResumeGameRequest) (*ResumeGameResponse, error)
	StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error)
	mustEmbedUnimplementedPinochleServiceServer()
}

// UnimplementedPinochleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPinochleServiceServer struct {
}

func (UnimplementedPinochleServiceServer) CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedPinochleServiceServer) GetGame(context.Context, *GetGameRequest) (*GetGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (UnimplementedPinochleServiceServer) ListGames(*ListGamesRequest, PinochleService_ListGamesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListGames not implemented")
}
func (UnimplementedPinochleServiceServer) ResumeGame(context.Context, *ResumeGameRequest) (*ResumeGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeGame not implemented")
}
func (UnimplementedPinochleServiceServer) StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedPinochleServiceServer) mustEmbedUnimplementedPinochleServiceServer() {}

// UnsafePinochleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PinochleServiceServer will
// result in compilation errors.
type UnsafePinochleServiceServer interface {
	mustEmbedUnimplementedPinochleServiceServer()
}

func RegisterPinochleServiceServer(s grpc.ServiceRegistrar, srv PinochleServiceServer) {
	s.RegisterService(&PinochleService_ServiceDesc, srv)
}

func _PinochleService_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinochleServiceServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinochleService_CreateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinochleServiceServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinochleService_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinochleServiceServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinochleService_GetGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinochleServiceServer).GetGame(ctx, req.(*GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinochleService_ListGames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListGamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PinochleServiceServer).ListGames(m, &pinochleServiceListGamesServer{stream})
}

type PinochleService_ListGamesServer interface {
	Send(*Game) error
	grpc.ServerStream
}

type pinochleServiceListGamesServer struct {
	grpc.ServerStream
}

func (x *pinochleServiceListGamesServer) Send(m *Game) error {
	return x.ServerStream.SendMsg(m)
}

func _PinochleService_ResumeGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinochleServiceServer).ResumeGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinochleService_ResumeGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinochleServiceServer).ResumeGame(ctx, req.(*ResumeGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinochleService_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinochleServiceServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinochleService_StartGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinochleServiceServer).StartGame(ctx, req.(*StartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PinochleService_ServiceDesc is the grpc.ServiceDesc for PinochleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PinochleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "claco.pinochle.PinochleService",
	HandlerType: (*PinochleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGame",
			Handler:    _PinochleService_CreateGame_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _PinochleService_GetGame_Handler,
		},
		{
			MethodName: "ResumeGame",
			Handler:    _PinochleService_ResumeGame_Handler,
		},
		{
			MethodName: "StartGame",
			Handler:    _PinochleService_StartGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListGames",
			Handler:       _PinochleService_ListGames_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pinochle.proto",
}
